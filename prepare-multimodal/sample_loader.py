# This file was automatically generated by `energon prepare`.
# TODO: Edit it to return the proper fields
from PIL import Image
import io
import torchvision.transforms as transforms

def sample_loader(raw: dict) -> dict:    # Note: Images are already decoded to tensors
    # TODO: Set the correct values for all (required) fields
    image = Image.open(io.BytesIO(raw["image"]))

    return dict(
        image=image,  # expected type: torch.Tensor
        context=raw["context"].decode('utf-8'),  # expected type: str
        answers=raw["answers"].decode('utf-8'),  # expected type: typing.Optional[typing.List[str]], default: None
        answer_weights=None,  # expected type: typing.Optional[torch.Tensor], default: None
    )

def part_filter(part: str) -> bool:
    # TODO: Filter for parts required by the sample_loader
    # E.g. if your dataset contains jpeg, txt and json, but you won't use json,
    # remove it from the list, such that it is not decoded. If you need all, keep as is
    # print("part:", part)
    return part in ('TODO', "image", "context", "answers")